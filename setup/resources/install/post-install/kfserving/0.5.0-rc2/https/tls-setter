#!/bin/bash

# https://kubernetes.github.io/ingress-nginx/

set -e
set -o errtrace
set -o errexit
set -o nounset
set -o pipefail


function set_helm () {
  echo "$1"
  HELM_MAJOR_VER="$(helm version | grep -oP '{Version:\"v\K[0-9.]+' | cut -d '.' -f 1)"
  echo "Your helm major version is: [$HELM_MAJOR_VER]"
  if [[ $(command -v helm > /dev/null) || "${HELM_MAJOR_VER}" -lt "3" ]]; then
    curl -o get_helm.sh https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get && \
        chmod +x get_helm.sh && \
        ./get_helm.sh
    helm init
  else
    echo "helm has been installed alerady."
  fi
}> set_helm.log 2>&1


# function install_tiller () {
#   if [[ -z "$(kubectl -n kube-system get serviceaccount | grep tiller)" ]]; then
#     kubectl -n kube-system create serviceaccount tiller
#   fi
#   if [[ -z "$(kubectl -n kube-system get clusterrolebinding |grep tiller-cluster-rule)" ]]; then
#     kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller
#   fi
#   helm repo add stable https://charts.helm.sh/stable
#   helm init --service-account tiller # --upgrade
#   echo "tiller has been set."
# }


function install_nginx () {
  NAMESPACE="${1:-istio-system}"  
  helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
  helm repo update

  # https://github.com/kubernetes/ingress-nginx/blob/master/charts/ingress-nginx/values.yaml
  helm install \
    ingress-nginx \
    --namespace ${NAMESPACE} \
    ingress-nginx/ingress-nginx \
    --set metrics.enabled=true
} > install_nginx.log 2>&1


function set_letsencrypt () {
  NAMESPACE="${1:-istio-system}"
  local USER_EMAIL=""
  local USER_DOMAIN=""
  echo "Put your info. to configure Let's encrypt:"
  read -p "Enter your e-mail: " USER_EMAIL
  if [[ -z "$USER_EMAIL" ]]; then
    printf '%s\n' "No e-mail entered"
    exit 1
  fi
  read -p "Enter your domain(ex. web.example.com): " USER_DOMAIN
  if [[ -z "$DOMAIN" ]]; then
    printf '%s\n' "No domain entered"
    exit 1
  fi
  echo "${NAMESPACE}"
  kubectl apply -f - <<EOF
apiVersion: cert-manager.io/v1  # >= 1.0
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
  namespace: ${NAMESPACE}
spec:
  acme:
    email: ${USER_EMAIL}
    server: https://acme-v02.api.letsencrypt.org/directory
    preferredChain: "ISRG Root X1"
    privateKeySecretRef:
      # Secret resource used to store the account's private key.
      # `kubectl -n cert-manager get secrets letsencrypt-staging-private-key`
      name: letsencrypt-prd-pkey
    solvers:
    # An empty 'selector' means that this solver matches all domains
    - selector: {}
    # - selector:
    #     dnsZones:
    #     - 'example.com'
    #     # matchLabels:
    #     #   letsencrypt-environment: "production"
      http01:
        ingress:
          class: nginx
EOF
  kubectl -n ${NAMESPACE} wait --for=condition=Ready \
    clusterissuer letsencrypt-prod
  kubectl apply -f - <<EOF
apiVersion: cert-manager.io/v1  # >= 1.0
kind: ClusterIssuer
metadata:
  name: letsencrypt-stg
  namespace: ${NAMESPACE}
spec:
  acme:
    email: ${USER_EMAIL}
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    preferredChain: "ISRG Root X1"
    privateKeySecretRef:
      # Secret resource used to store the account's private key.
      # `kubectl -n cert-manager get secrets letsencrypt-staging-private-key`
      name: letsencrypt-stg-pkey
    solvers:
    # An empty 'selector' means that this solver matches all domains
    - selector: {}
    # - selector:
    #     dnsZones:
    #     - 'stg.example.com'
    #     # matchLabels:
    #     #   letsencrypt-environment: "staging"
      http01:
        ingress:
          class: nginx
EOF
  kubectl -n ${NAMESPACE} wait --for=condition=Ready \
    issuer letsencrypt-stg
  echo "done"
}

function set_nginx () {
  NAMESPACE="${1:-istio-system}"
  kubectl apply -f - <<EOF
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: ingress-prd
  namespace: istio-system
  annotations:
    # cert-manager.io/issuer  # >= v0.11
    cert-manager.io/issuer: letsencrypt-prd
    # letsencrypt-environment: "production"
    # cert-manager.io/cluster-issuer: letsencrypt-istio-prod
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true" # "true"
    # kubernetes.io/tls-acme: "true"  # < Could not determine issuer for ingress due to bad annotations: failed to determine issuer name to be used for ingress resource
    nginx.ingress.kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  tls:  # < placing a host in the TLS config will indicate a cert should be created
  - hosts:
    - example.com
    - grafana.example.com
    secretName: ingress-tls-prd  # < cert-manager will store the created certificate in this secret.
    # `kubectl -n kubeflow describe certificates.cert-manager.io nginx-tls-prod`
  rules:
  - host: "grafana.example.com"
    http:
      paths:
      - path: /
        backend:
          serviceName: grafana
          servicePort: 3000
EOF
  kubectl -n ${NAMESPACE} wait --for=condition=Ready \
    certificates ingress-tls-prd && \
  kubectl -n ${NAMESPACE} wait --for=condition=Ready \
    ingress ingress-prd
  kubectl apply -f - <<EOF
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: ingress-stg
  namespace: istio-system
  annotations:
    # cert-manager.io/issuer  # >= v0.11
    cert-manager.io/issuer: letsencrypt-stg
    # letsencrypt-environment: "staging"
    # cert-manager.io/cluster-issuer: letsencrypt-istio-stg
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true" # "true"
    # kubernetes.io/tls-acme: "true"  # < Could not determine issuer for ingress due to bad annotations: failed to determine issuer name to be used for ingress resource
    nginx.ingress.kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  tls:  # < placing a host in the TLS config will indicate a cert should be created
  - hosts:
    - stg.example.com
    - grafana.stg.example.com
    secretName: ingress-tls-stg  # < cert-manager will store the created certificate in this secret.
    # `kubectl -n kubeflow describe certificates.cert-manager.io nginx-tls-prod`
  rules:
  - host: "grafana.stg.example.com"
    http:
      paths:
      - path: /
        backend:
          serviceName: grafana
          servicePort: 3000
EOF
  kubectl -n ${NAMESPACE} wait --for=condition=Ready \
    certificates ingress-tls-stg && \
  kubectl -n ${NAMESPACE} wait --for=condition=Ready \
    ingress ingress-stg
  echo "done"
}

#   cat << EOF | kubectl apply -f -
# apiVersion: cert-manager.io/v1alpha2
# kind: Certificate
# metadata:
#   name: nginx-tls
#   namespace: ${NAMESPACE}
# spec:
#   secretName: nginx-tls
#   issuerRef:
#     name: letsencrypt
#     kind: Issuer
#     secretName: nginx-tls-prod
#   acme:
#     config:
#       - http01:
#         ingressClass: nginx
#         domains:
#         - ${USER_DOMAIN}
# EOF
# }

"$@"