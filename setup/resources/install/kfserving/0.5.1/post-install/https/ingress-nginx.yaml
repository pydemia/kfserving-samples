---
# apiVersion: networking.k8s.io/v1  # >= k8s 1.16
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: ingress-prd
  # namespace: istio-system
  annotations:
    cert-manager.io/issuer: letsencrypt-prd  # >= v0.11
    # cert-manager.io/cluster-issuer: letsencrypt-prd
    # letsencrypt-environment: "production"
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"  # < Could not determine issuer for ingress due to bad annotations: failed to determine issuer name to be used for ingress resource
    kubernetes.io/ingress.allow-http: "true"
    # nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/ssl-redirect: "true" # "true"
    # nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  tls:  # < placing a host in the TLS config will indicate a cert should be created
  - hosts:

    # - airuntime.com
    - app.airuntime.com
    - kiali.airuntime.com
    - prometheus.airuntime.com
    - grafana.airuntime.com
    - tracing.airuntime.com
    - dashboard.airuntime.com
    - es.airuntime.com
    - kibana.airuntime.com
    - fluentd.airuntime.com
    - tekton.airuntime.com

    - dev.airuntime.com
    - app.dev.airuntime.com
    - kiali.dev.airuntime.com
    - prometheus.dev.airuntime.com
    - grafana.dev.airuntime.com
    - tracing.dev.airuntime.com
    - dashboard.dev.airuntime.com
    - es.dev.airuntime.com
    - kibana.dev.airuntime.com
    - fluentd.dev.airuntime.com
    - tekton.dev.airuntime.com
    

    secretName: ingress-tls-prd  # < cert-manager will store the created certificate in this secret.
    # `kubectl -n kubeflow describe certificates.cert-manager.io nginx-tls-prod`
  rules:
  - host: "*.airuntime.com"  # www.example.com
    http:
      paths:
      - path: /
        backend:
          serviceName: istio-ingressgateway
          servicePort: 80
  - host: "*.dev.airuntime.com"  # www.example.com
    http:
      paths:
      - path: /
        backend:
          serviceName: istio-ingressgateway
          servicePort: 80
  # - host: "app.airuntime.com"  # www.example.com
  #   http:
  #     paths:
  #     - path: /
  #       backend:
  #         serviceName: istio-ingressgateway
  #         servicePort: 80
  # - host: "kiali.airuntime.com"  # www.example.com
  #   http:
  #     paths:
  #     - path: /
  #       backend:
  #         serviceName: istio-ingressgateway
  #         servicePort: 80
  # - host: "prometheus.airuntime.com"  # www.example.com
  #   http:
  #     paths:
  #     - path: /
  #       backend:
  #         serviceName: istio-ingressgateway
  #         servicePort: 80
  # - host: "grafana.airuntime.com"  # www.example.com
  #   http:
  #     paths:
  #     - path: /
  #       backend:
  #         serviceName: istio-ingressgateway
  #         servicePort: 80
  # - host: "tracing.airuntime.com"  # www.example.com
  #   http:
  #     paths:
  #     - path: /
  #       backend:
  #         serviceName: istio-ingressgateway
  #         servicePort: 80
  # - host: "es.airuntime.com"  # www.example.com
  #   http:
  #     paths:
  #     - path: /
  #       backend:
  #         serviceName: istio-ingressgateway
  #         servicePort: 80
  # - host: "kibana.airuntime.com"  # www.example.com
  #   http:
  #     paths:
  #     - path: /
  #       backend:
  #         serviceName: istio-ingressgateway
  #         servicePort: 80
  # - host: "fluentd.airuntime.com"  # www.example.com
  #   http:
  #     paths:
  #     - path: /
  #       backend:
  #         serviceName: istio-ingressgateway
  #         servicePort: 80
  # - host: "tekton.airuntime.com"  # www.example.com
  #   http:
  #     paths:
  #     - path: /
  #       backend:
  #         serviceName: istio-ingressgateway
  #         servicePort: 80
  # - host: "dashboard.airuntime.com"  # www.example.com
  #   http:
  #     paths:
  #     - path: /
  #       backend:
  #         serviceName: istio-ingressgateway
  #         servicePort: 80
  
  # - host: "dashboard.airuntime.com"  # www.example.com
  #   http:
  #     paths:
  #     - path: /
  #       backend:
  #         serviceName: istio-ingressgateway
  #         servicePort: 443
---
# apiVersion: networking.k8s.io/v1  # >= k8s 1.16
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: ingress-stg
  # namespace: istio-system
  annotations:
    cert-manager.io/issuer: letsencrypt-stg  # >= v0.11
    # cert-manager.io/cluster-issuer: letsencrypt-stg
    # letsencrypt-environment: "staging"
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"  # < Could not determine issuer for ingress due to bad annotations: failed to determine issuer name to be used for ingress resource
    kubernetes.io/ingress.allow-http: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    nginx.ingress.kubernetes.io/ssl-redirect: "true" # "true"
    # nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  tls:  # < placing a host in the TLS config will indicate a cert should be created
  - hosts:
    - dev.airuntime.com
    - app.dev.airuntime.com
    - kiali.dev.airuntime.com
    - prometheus.dev.airuntime.com
    - grafana.dev.airuntime.com
    - tracing.dev.airuntime.com
    - dashboard.dev.airuntime.com
    - es.dev.airuntime.com
    - kibana.dev.airuntime.com
    - fluentd.dev.airuntime.com
    - tekton.dev.airuntime.com

    secretName: ingress-tls-stg  # < cert-manager will store the created certificate in this secret.
    # `kubectl -n kubeflow describe certificates.cert-manager.io nginx-tls-prod`
  rules:
  - host: "nonexist.dev.airuntime.com"  # www.example.com
    http:
      paths:
      - path: /
        backend:
          serviceName: istio-ingressgateway
          servicePort: 80
  # - host: "dashboard.dev.airuntime.com"  # www.example.com
  #   http:
  #     paths:
  #     - path: /
  #       backend:
  #         serviceName: istio-ingressgateway
  #         servicePort: 443
---
